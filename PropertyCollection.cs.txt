namespace Codefarts.UIControls
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

    using Newtonsoft.Json.Utilities;

    /// <summary>
    /// Provides a class for storing and retrieving named values.
    /// </summary>
    /// <remarks>This class is used by <see cref="Control"/>.</remarks>
    [Serializable]
    public class PropertyCollection : IDictionary<string, object>
    {
        /// <summary>
        /// Stores the names of the stored values.
        /// </summary>
        private string[] names;

        /// <summary>
        /// Stores the values of the properties.
        /// </summary>
        private object[] values;

        /// <summary>
        /// The countStores how many items have been stored.
        /// </summary>
        private int count;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyCollection"/> class.
        /// </summary>
        public PropertyCollection()
        {
            this.names = new string[128];
            this.values = new object[128];
        }

        /// <summary>
        /// Gets the specified value for name.
        /// </summary>
        /// <param name="name">The name to retrieve the value for.</param>
        /// <returns>The value assigned to 'name'.</returns>
        /// <exception cref="System.Collections.Generic.KeyNotFoundException">If name could not be found.</exception>
        public object Get(string name)
        {
            var index = Array.IndexOf(this.names, name);
            if (index == -1)
            {
                throw new KeyNotFoundException();
            }

            return this.values[index];
        }

        public void Add(string name, object value)
        {
            if (this.names.Length == this.count)
            {
                Array.Resize(ref this.names, this.names.Length * 2);
                Array.Resize(ref this.values, this.values.Length * 2);
            }

            this.names[this.count] = name;
            this.values[this.count] = value;
            this.count++;
        }

        /// <summary>
        /// Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
        /// </summary>
        /// <returns>
        /// true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
        /// </returns>
        /// <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        public bool ContainsKey(string key)
        {
            return Array.IndexOf(this.names, key) != -1;
        }

        ///// <summary>
        ///// Determines whether the specified name already exists.
        ///// </summary>
        ///// <param name="name">The name to check for.</param>
        ///// <returns>true if the name is present.</returns>
        //public bool ContainsName(string name)
        //{
        //    return Array.IndexOf(this.names, name) != -1;
        //}

        public string[] GetNames()
        {
            var tempArray = new string[this.count];
            Array.Copy(this.names, 0, tempArray, 0, this.count);
            return tempArray;
        }

        public bool Remove(string name)
        {
            var index = Array.IndexOf(this.names, name);
            if (index == -1)
            {
                return false;
            }

            return this.Remove(index);
        }

        /// <summary>
        /// Gets the value associated with the specified key.
        /// </summary>
        /// <returns>
        /// true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
        /// </returns>
        /// <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        public bool TryGetValue(string key, out object value)
        {
            if (!this.ContainsKey(key))
            {
                value = null;
                return false;
            }

            value = this.Get(key);
            return true;
        }

        public bool Remove(int index)
        {
            if ((index < 0 && index > this.count - 1) || this.count == 0)
            {
                return false;
            }

            Array.Copy(this.names, index + 1, this.names, index, this.count - index);
            Array.Copy(this.values, index + 1, this.values, index, this.count - index);

            this.count--;
            this.names[this.count] = null;
            this.values[this.count] = null;

            return true;
        }

        /// <summary>
        /// Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
        /// </summary>
        /// <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        public void Add(KeyValuePair<string, object> item)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
        /// </summary>
        /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        public void Clear()
        {
            Array.Resize(ref this.names, 0);
            Array.Resize(ref this.values, 0);
        }

        /// <summary>
        /// Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
        /// </summary>
        /// <returns>
        /// true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
        /// </returns>
        /// <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        public bool Contains(KeyValuePair<string, object> item)
        {
            return this.ContainsKey(item.Key);
        }

        /// <summary>
        /// Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
        /// </summary>
        /// <returns>
        /// true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
        /// </returns>
        /// <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        public bool Remove(KeyValuePair<string, object> item)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets the number of stored values.
        /// </summary>  
        public int Count
        {
            get
            {
                return this.count;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
        /// </summary>
        /// <returns>
        /// true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
        /// </returns>
        public bool IsReadOnly { get; }

        /// <summary>
        /// Gets or sets the <see cref="System.Object"/> with the specified name.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <returns>The stored <see cref="System.Object"/>.</returns>								   
        /// <exception cref="System.Collections.Generic.KeyNotFoundException">
        /// If <see cref="name"/> is not found when retrieving the value.																	  
        /// </exception>
        /// <remarks>If <see cref="name"/> is not found it will be added and it's value assigned.</remarks>
        public object this[string name]
        {
            get
            {
                var index = Array.IndexOf(this.names, name);
                if (index == -1)
                {
                    throw new KeyNotFoundException();
                }

                return this.values[index];
            }

            set
            {
                var index = Array.IndexOf(this.names, name);
                if (index == -1)
                {
                    this.Add(name, value);
                    return;
                }

                this.values[index] = value;
            }
        }

        /// <summary>
        /// Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
        /// </summary>
        /// <returns>
        /// An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
        /// </returns>
        public ICollection<string> Keys
        {
            get
            {
                return this.Keys;
            }
        }

        /// <summary>
        /// Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
        /// </summary>
        /// <returns>
        /// An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
        /// </returns>
        public ICollection<object> Values
        {
            get
            {
                return this.values;
            }
        }

        #region Implementation of IEnumerable

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>
        /// An enumerator that can be used to iterate through the collection.
        /// </returns>
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator()
        {
            foreach (var value in this.names)
            {
                var index = this.IndexOf(value);
                yield return new KeyValuePair<string, object>(this.names[index],this.values[index]);
            }     
        }

        /// <summary>
        /// Returns an enumerator that iterates through a collection.
        /// </summary>
        /// <returns>
        /// An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
        /// </returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }

        #endregion
    }
}
